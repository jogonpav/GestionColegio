/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reto;

import conexion.conexion;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author @Jogonpav
 */
public class v_Asignar_Profesor extends javax.swing.JFrame {
    ArrayList<Integer> id_profesores; //Array que permite guardar los id traidos desde la base de datos y relacionarlos con los iten o listas mostrados en el jframe
    ArrayList<Integer> id_cursos; //Array que permite guardar los id traidos desde la base de datos y relacionarlos con los iten o listas mostrados en el jframe
    String datos_tabla [] = new String[4]; //Array necesarios para construir los jtable
    String datos_horario [] = new String[7];//Array necesarios para construir los jtable

    /**
     * Creates new form v_Asingnar_Profesor
     */
    public v_Asignar_Profesor() {
        initComponents();
        EstablecerTablaListas(); //Llamar la función para mostrar listas al usuario

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Asignar Profesor");

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setFocusCycleRoot(true);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Seleccione un curso");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sábado", "Domingo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton1.setText(" Asignar Profesor");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setText("Selecciones el profesor a asignar");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Profesor", "Ubicación", "Fecha Inicio", "Fecha Cierre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jLabel5.setForeground(new java.awt.Color(0, 0, 255));

        jLabel6.setForeground(new java.awt.Color(0, 0, 255));

        jButton2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jButton2.setText("Finalizar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane3)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(324, 324, 324)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(jList1.getSelectedIndex() >=0){ //permite verificar que el usuario seleccione un curso del Jlist
            if (jComboBox1.getSelectedIndex() >= 0){ //    //permite verificar que el usuario seleccione un profesor del combobox         
                jLabel5.setText("");
                if (datos_tabla[0].equals("No Asignado")){ //se compara si el profesor traido desde la base de datos es de tipo no asignado
                    asignarProfesor();
                }else{
                    int resp = JOptionPane.showConfirmDialog(null, "Si asigna un nuevo profesor al curso este se actualizará\n"+
                            "¿Está seguro?","Alerta!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE); //Permite verificar si el usuario modificará un profesor
                    if(resp==0){ //si respuesta es si se actualzia el registro del profesor
                        asignarProfesor();
                        jComboBox1.removeAllItems();// Remover los items cargados en el jList, ya que si no se duplica al establecer los items nuevamente
                        
                        EstablecerTablaListas();  //cargar la tabla de nuevo para deselecionar del jlist.

 
                    }
                }
            }else{
                jLabel5.setText("Seleccione un profesor");
            }    
        }else{
            jLabel6.setText("Seleccione un curso de la lista anterior");            
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
        if (jList1.getSelectedIndex()!=-1)
            verInformacionCurso();
    }//GEN-LAST:event_jList1ValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(v_Asignar_Profesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(v_Asignar_Profesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(v_Asignar_Profesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(v_Asignar_Profesor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new v_Asignar_Profesor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    public void verInformacionCurso() {
        
        jLabel5.setText(""); 
        jLabel6.setText("");

        try{
            conexion cn = new conexion();
            Connection conn = cn.conectar();
            Statement stmt = conn.createStatement();         
            String query = "SELECT ubicacion, fecha_inicio, fecha_fin, profesores_id FROM cursos WHERE ID ="+id_cursos.get(jList1.getSelectedIndex());
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()){ //guardo los datos de la consulta en un array para establecer una de la tablas
                datos_tabla[1] = rs.getString(1);
                datos_tabla[2] = rs.getString(2);
                datos_tabla[3] = rs.getString(3);
                if (rs.getString(4) == null){ //si el profesor no ha sido asignado se cambia null por No Asignado
                    datos_tabla[0] = "No Asignado";
                }else{                        
                    query = "SELECT nombre FROM profesores WHERE ID ="+(rs.getString(4));
                    rs = stmt.executeQuery(query);
                    while(rs.next()){
                        datos_tabla[0] = rs.getString(1);
                    }                   
                }  
            }        
            DefaultTableModel tabla_curso = new DefaultTableModel (); //Estableciendo el DefaultTableModel para una de las tablas
            tabla_curso.addColumn("Profesor");
            tabla_curso.addColumn("Ubicación");
            tabla_curso.addColumn("Fecha Inicio");
            tabla_curso.addColumn("Fecha Cierre"); //agregando las columnas al modelo
            
            jTable2.setModel(tabla_curso); //agregando una fila al jtable
            tabla_curso.addRow(datos_tabla); //agra
            query = "SELECT horario_id FROM cursos WHERE ID ="+ (id_cursos.get(jList1.getSelectedIndex())); //consulta para traer la llave foranea horario_id que enlasa a la tabla horario
            rs = stmt.executeQuery(query); //haciedo la consulta
            while(rs.next()){                
                query = "SELECT lunes, martes, miercoles, jueves, viernes, sabado, domingo FROM horario WHERE id ="+ (rs.getInt(1));  //guardar la consulta del horario_id                
            }
            rs = stmt.executeQuery(query);
            while(rs.next()){
                datos_horario [0] = rs.getString(1); //guardando datos de la consulta en un array para darselos a la tabla
                datos_horario [1] = rs.getString(2);
                datos_horario [2] = rs.getString(3);
                datos_horario [3] = rs.getString(4);
                datos_horario [4] = rs.getString(5);
                datos_horario [5] = rs.getString(6);
                datos_horario [6] = rs.getString(7);
            }
            DefaultTableModel tabla_horario = new DefaultTableModel();
            tabla_horario.addColumn("Lunes");
            tabla_horario.addColumn("Martes");
            tabla_horario.addColumn("Miércoles");
            tabla_horario.addColumn("Jueves");
            tabla_horario.addColumn("Viernes");
            tabla_horario.addColumn("Sábado");
            tabla_horario.addColumn("Domingo");
            jTable1.setModel(tabla_horario);
            tabla_horario.addRow(datos_horario);

        }
        catch(SQLException ex){
            System.out.println(ex);
        }
    }
    
    public void asignarProfesor(){
        try{
            conexion cn = new conexion();
            Connection conn = cn.conectar();
            Statement stmt = conn.createStatement();
            String query = "UPDATE cursos SET profesores_id="+(id_profesores.get(jComboBox1.getSelectedIndex()))+" WHERE id ="+(id_cursos.get(jList1.getSelectedIndex())); //guardando el profesor selccionado en la tabla cursos
            stmt.executeUpdate(query);
        }catch (SQLException ex){
            System.out.println(ex);
        }
        
        JOptionPane.showMessageDialog(this, "Profesor Asignado", "Asignación Exitosa",JOptionPane.INFORMATION_MESSAGE);
    }

    private void EstablecerTablaListas() { //establece las lista profesores y cursos 
        DefaultListModel model = new DefaultListModel ();
        id_profesores = new ArrayList();
        id_cursos = new ArrayList();
        try { //Estableciendo conexión con la base de datos
            conexion cn = new conexion();
            Connection conn = cn.conectar();
            Statement stmt = conn.createStatement();
            String query = "SELECT ID, nombre FROM profesores";
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()){
               id_profesores.add(rs.getInt(1));
               jComboBox1.addItem(rs.getString(2));
            }
            jComboBox1.setSelectedIndex(-1);
            query = "SELECT ID, nombre FROM cursos";
            rs = stmt.executeQuery(query);
            while(rs.next()){
                id_cursos.add(rs.getInt(1));
                model.addElement(rs.getString(2));
            }
            jList1.setModel(model);
            
        }        
        catch(SQLException ex){
            System.out.println(ex);
        }
       
    }
}
