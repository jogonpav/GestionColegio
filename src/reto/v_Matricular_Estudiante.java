/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package reto;

import conexion.conexion;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static reto.v_Estudiante.id_estudiante;
import static reto.v_Estudiante.numero_cursos;

/**
 *
 * @author @Jogonpav
 */
public class v_Matricular_Estudiante extends javax.swing.JFrame {
    ArrayList<Integer> id_cursos;
    static int id_curso_seleccionado;
    String datos_tabla [] = new String[4];
    String datos_horario [] = new String[7];

    /**
     * Creates new form v_Asingnar_Profesor
     */
    public v_Matricular_Estudiante() {
        initComponents();        
        DefaultListModel model = new DefaultListModel (); //inicializar el model para agregar los cursos al jlist
        id_curso_seleccionado = -1;
        int pos = 0;        
        id_cursos = new ArrayList();
        jLabel4.setText("CURSOS MATRICULADOS: "+numero_cursos+" / 3 ");
        try {
            conexion cn = new conexion();
            Connection conn = cn.conectar();
            Statement stmt = conn.createStatement();
            String query = "SELECT ID, nombre FROM cursos WHERE profesores_ID IS NOT NULL"; //trae los cursos que tienen un profesor asignado para que el estudiante lo pueda matricular
            ResultSet rs = stmt.executeQuery(query);
            while(rs.next()){
                id_cursos.add(rs.getInt(1));//se guardan los id del curso seleccionado
                model.addElement(rs.getString(2)); // se agregan los cursos al modelo del jList
            }
            jList1.setModel(model);
        }
        catch(SQLException ex){
            System.out.println(ex);
        }       
        jList1.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("PANEL DE MATRÍCULA");

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setText("Seleccione un curso para matricular");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sábado", "Domingo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setText("Matricular Curso Seleccionado");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Profesor", "Ubicación", "Fecha Inicio", "Fecha Cierre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable2);

        jButton2.setText("Ver Contenido del curso");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(0, 0, 255));

        jLabel4.setText("CURSOS MATRICULADOS: 0 / 3");

        jButton3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton3.setText("Finalizar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 728, Short.MAX_VALUE)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane3))
                .addContainerGap(37, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(239, 239, 239))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if(id_curso_seleccionado >=0){  //verificar que el usuario seleccione un curso
            if (verificarCursoMatriculado()==0){
                int resp = JOptionPane.showConfirmDialog(null, "Usted matriculará el curso "+(jList1.getSelectedValue())+"\n"+
                        "¿Está seguro?","Alerta!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if(resp==0){
                    asignarEstudiante();
                }
            }else{
                JOptionPane.showMessageDialog(this, "Ya te encuentras matriculado en el curso de "+(jList1.getSelectedValue()), "Alerta!", JOptionPane.INFORMATION_MESSAGE);
            }
        }else{
            jLabel3.setText("Seleccione un curso de la lista anterior");            
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        // TODO add your handling code here:
        verInformacionCurso();
    }//GEN-LAST:event_jList1ValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(id_curso_seleccionado >=0){
            v_Mostrar_Contenidos v_most_cont = new v_Mostrar_Contenidos();
            v_most_cont.setLocationRelativeTo(null);
            v_most_cont.setResizable(false);
            v_most_cont.setVisible(true);
        }else{
            jLabel3.setText("Seleccione un curso de la lista anterior");            
        }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(v_Matricular_Estudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(v_Matricular_Estudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(v_Matricular_Estudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(v_Matricular_Estudiante.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new v_Matricular_Estudiante().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    public void verInformacionCurso() {     
        jLabel3.setText(""); 
        id_curso_seleccionado= id_cursos.get(jList1.getSelectedIndex());
        try{ //mostrar la información del curso seleccionado
            conexion cn = new conexion();
            Connection conn = cn.conectar();
            Statement stmt = conn.createStatement();
            String query = "SELECT ubicacion, fecha_inicio, fecha_fin, profesores_id FROM cursos WHERE ID ="+id_cursos.get(jList1.getSelectedIndex());
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()){ 
                datos_tabla[1] = rs.getString(1);
                datos_tabla[2] = rs.getString(2);
                datos_tabla[3] = rs.getString(3);
                if (rs.getString(4) == null){
                    datos_tabla[0] = "No Asignado";
                }else{                        
                    query = "SELECT nombre FROM profesores WHERE ID ="+(rs.getString(4));
                    rs = stmt.executeQuery(query);
                    while(rs.next()){
                        datos_tabla[0] = rs.getString(1);
                    }                   
                }  
            }        
            DefaultTableModel tabla_curso = new DefaultTableModel ();
            tabla_curso.addColumn("Profesor");
            tabla_curso.addColumn("Ubicación");
            tabla_curso.addColumn("Fecha Inicio");
            tabla_curso.addColumn("Fecha Cierre");
            jTable2.setModel(tabla_curso);
            tabla_curso.addRow(datos_tabla);
            query = "SELECT horario_id FROM cursos WHERE ID ="+ (id_cursos.get(jList1.getSelectedIndex())); //consulta para traer la llave foranea horario_id que enlasa a la tabla horario
            rs = stmt.executeQuery(query); //haciedo la consulta
            while(rs.next()){
                query = "SELECT lunes, martes, miercoles, jueves, viernes, sabado, domingo FROM horario WHERE id ="+ (rs.getInt(1));  //guardar la consulta del horario_id
            }
            rs = stmt.executeQuery(query);
            while(rs.next()){
                datos_horario [0] = rs.getString(1);
                datos_horario [1] = rs.getString(2);
                datos_horario [2] = rs.getString(3);
                datos_horario [3] = rs.getString(4);
                datos_horario [4] = rs.getString(5);
                datos_horario [5] = rs.getString(6);
                datos_horario [6] = rs.getString(7);
            }
            DefaultTableModel tabla_horario = new DefaultTableModel();
            tabla_horario.addColumn("Lunes");
            tabla_horario.addColumn("Martes");
            tabla_horario.addColumn("Miércoles");
            tabla_horario.addColumn("Jueves");
            tabla_horario.addColumn("Viernes");
            tabla_horario.addColumn("Sábado");
            tabla_horario.addColumn("Domingo");
            jTable1.setModel(tabla_horario);
            tabla_horario.addRow(datos_horario);

        }
        catch(SQLException ex){
            System.out.println(ex);
        }

    }
    
    public void asignarEstudiante(){
        try{
            conexion cn = new conexion(); 
            Connection conn = cn.conectar();
            Statement stmt = conn.createStatement();//registra los estudiantes y el curso selccionado 
            String query = "INSERT INTO estudiantesxcurso (ESTUDIANTES_ID,CURSOS_ID) VALUES ("+id_estudiante+","+(id_cursos.get(jList1.getSelectedIndex()))+")";   
            stmt.executeUpdate(query);
        }catch (SQLException ex){
            System.out.println(ex);
        }
        
        JOptionPane.showMessageDialog(this, "Cursos Matriculado", "Asignación Exitosa",JOptionPane.INFORMATION_MESSAGE);
        numero_cursos++;
        jLabel4.setText("CURSOS MATRICULADOS: "+numero_cursos+" / 3 ");
        if (numero_cursos ==3){
            jButton1.setEnabled(false);
            jLabel4.setText("EL ESTUDIANTE TIENE TODOS LOS CURSOS MATRICULADOS ("+numero_cursos+")");
        }
    }
    
    public Integer verificarCursoMatriculado(){//verifica que el estudiante no tenga el curso ya matriculado
        int respuesta = 0;
        try{
                conexion cn = new conexion();
                Connection conn = cn.conectar();
                Statement stmt = conn.createStatement();
                String query = "SELECT COUNT(*) FROM estudiantesxcurso WHERE ESTUDIANTES_ID = "+id_estudiante+" AND CURSOS_ID="+ (id_cursos.get(jList1.getSelectedIndex()));   
                ResultSet rs = stmt.executeQuery(query);
                while(rs.next()){
                    respuesta = rs.getInt(1);                
                }
        }catch (SQLException ex){
                System.out.println(ex);
            }        
        return respuesta;
        
    }
    
 
}
